pipeline {
    agent any

    environment {
        GIT_REPO = 'https://github.com/ihebkhalfallah/Groupe-5-ARCTIC01-2425.git'
        BRANCH = 'iheb-universite'
        GIT_CREDENTIALS_ID = 'jenkins-pipeline'
        SONARQUBE_SERVER = 'http://localhost:9000/'
        SONAR_TOKEN = 'b570a98e9f3847024a863f7958c006410722c73d' // to be moved
        DOCKERHUB_CREDENTIALS = 'token-docker-hub'
        IMAGE_NAME = 'backend'
        IMAGE_TAG = 'latest'
    }

    stages {
        stage('Clone Repository') {
            steps {
                echo "Cloning branch '${BRANCH}' from '${GIT_REPO}'"
                git credentialsId: "${GIT_CREDENTIALS_ID}", branch: "${BRANCH}", url: "${GIT_REPO}"
            }
        }
        
        stage('Run with Docker Compose') {
            steps {
                echo "Starting services with Docker Compose..."
                sh 'docker-compose down || true'
                sh 'docker-compose up -d --build'
                sh 'sleep 60'
            }
        }
        stage('Clean Target Directory') {
            steps {
                echo "Cleaning target directory..."
                sh 'mvn clean'
            }
        }
        // stage('Start Test Database') {
        //     steps {
        //         echo "Starting temporary MySQL container..."
        //         sh '''
        //             docker run --name mysql-container \
        //                 -e MYSQL_DATABASE=foyer -e MYSQL_ALLOW_EMPTY_PASSWORD=yes \
        //                 -p 3306:3306 -d mysql:5.7
        
        //             echo "Waiting for MySQL to initialize..."
        //             until docker exec mysql-container mysqladmin ping -h"localhost" --silent; do
        //                 echo "Waiting for MySQL..."
        //                 sleep 2
        //             done
        //         '''
        //     }
        // }

        stage('Compile Source Code') {
            steps {
                echo "Compiling source code..."
                sh 'mvn compile'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                echo "Code analysis"
                sh "mvn sonar:sonar -Dsonar.url=${SONARQUBE_SERVER} -Dsonar.login=${SONAR_TOKEN}"
            }
        }

        stage('Test') {
            steps {
                echo "Running tests..."
                sh 'mvn test'
            }
        }

        stage('Build JAR') {
            steps {
                echo "Packaging the application..."
                sh 'mvn package'
            }
        }
        
        // stage('Remove Test Database') {
        //     steps {
        //         echo "Removing temporary MySQL container..."
        //         sh '''
        //          docker stop mysql-container || true
        //          docker rm mysql-container || true
        //         '''
        //     }
        // }
        
        stage('Deploy') {
            steps {
                echo "Deploying artifact to remote repository..."
                sh 'mvn deploy'
            }
        }

        stage('Building image'){
            steps{
                echo 'building ...';
                sh "docker build -t ${IMAGE_NAME}:${IMAGE_TAG} ."
            }
        }
        
        stage('Push docker image'){
            steps{
                echo 'push stage ... >>>>>>>>>>'
                withCredentials([usernamePassword(credentialsId: DOCKERHUB_CREDENTIALS,
                usernameVariable: 'DOCKERHUB_USERNAME', 
                passwordVariable: 'DOCKERHUB_PASSWORD')]){
                    echo 'Login ...'
                    sh "docker login -u ${DOCKERHUB_USERNAME} -p ${DOCKERHUB_PASSWORD}"

                    echo 'Tagging image...'
                    sh "docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${DOCKERHUB_USERNAME}/${IMAGE_NAME}:${IMAGE_TAG}"

                    echo 'Pushing docker image to docker hub...'
                    sh "docker push ${DOCKERHUB_USERNAME}/${IMAGE_NAME}:${IMAGE_TAG}"
                }
            }
        }
    }

    post {
        success {
            echo '‚úÖ Pipeline completed successfully!'
        }
        failure {
            echo '‚ùå Pipeline failed. Please check the logs.'
            // sh '''
            //         docker stop mysql-container || true
            //         docker rm mysql-container || true
            //     '''
        }
        always {
            echo 'üîÅ Pipeline execution finished.'
            echo 'Cleaning up Docker containers...'
            // sh 'docker-compose -f docker-compose.yml down'
        }
    }
}
